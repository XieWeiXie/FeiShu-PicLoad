// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: src/api/v1/pic.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PicServiceClient is the client API for PicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PicServiceClient interface {
	UploadPic(ctx context.Context, in *UploadPicReq, opts ...grpc.CallOption) (*UploadPicReply, error)
}

type picServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPicServiceClient(cc grpc.ClientConnInterface) PicServiceClient {
	return &picServiceClient{cc}
}

func (c *picServiceClient) UploadPic(ctx context.Context, in *UploadPicReq, opts ...grpc.CallOption) (*UploadPicReply, error) {
	out := new(UploadPicReply)
	err := c.cc.Invoke(ctx, "/feishuPicLoad.v1.PicService/UploadPic", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PicServiceServer is the server API for PicService service.
// All implementations should embed UnimplementedPicServiceServer
// for forward compatibility
type PicServiceServer interface {
	UploadPic(context.Context, *UploadPicReq) (*UploadPicReply, error)
}

// UnimplementedPicServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPicServiceServer struct {
}

func (UnimplementedPicServiceServer) UploadPic(context.Context, *UploadPicReq) (*UploadPicReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadPic not implemented")
}

// UnsafePicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PicServiceServer will
// result in compilation errors.
type UnsafePicServiceServer interface {
	mustEmbedUnimplementedPicServiceServer()
}

func RegisterPicServiceServer(s grpc.ServiceRegistrar, srv PicServiceServer) {
	s.RegisterService(&PicService_ServiceDesc, srv)
}

func _PicService_UploadPic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadPicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PicServiceServer).UploadPic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/feishuPicLoad.v1.PicService/UploadPic",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PicServiceServer).UploadPic(ctx, req.(*UploadPicReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PicService_ServiceDesc is the grpc.ServiceDesc for PicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "feishuPicLoad.v1.PicService",
	HandlerType: (*PicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadPic",
			Handler:    _PicService_UploadPic_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "src/api/v1/pic.proto",
}
